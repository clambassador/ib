cmake_minimum_required(VERSION 3.2)
set(PROJECT_NAME ib)
project(${PROJECT_NAME})

find_package(Threads REQUIRED)
set(LINKED_LIBRARIES Threads::Threads)

if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang" OR "${CMAKE_CXX_COMPILER_ID}" STREQUAL "AppleClang")
    add_compile_options(-Weverything -Wall -Wpedantic -Wextra -Wno-c++98-compat)
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    add_compile_options(-Wall -Wpedantic -Wextra)
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
    add_compile_options(/Wall)
endif()

file(GLOB PROJECT_SOURCES src/*.cc)
file(GLOB PROJECT_HEADERS include/*.h)
file(GLOB PROJECT_TEST_SOURCES src/test_*.cc)
file(GLOB PROJECT_TEST_HEADERS include/test_*.h)

message(STATUS "Project source files : ${PROJECT_SOURCES}")
message(STATUS "Project header files : ${PROJECT_HEADERS}")

if(PROJECT_TEST_SOURCES)
    list(REMOVE_ITEM PROJECT_SOURCES ${PROJECT_TEST_SOURCES})
    message(STATUS "Project source files : ${PROJECT_SOURCES}")
    message(STATUS "Project tests source files : ${PROJECT_TEST_SOURCES}")
endif(PROJECT_TEST_SOURCES)
if(PROJECT_TEST_HEADERS)
    list(REMOVE_ITEM PROJECT_HEADERS ${PROJECT_TEST_HEADERS})
    message(STATUS "Project header files : ${PROJECT_HEADERS}")
    message(STATUS "Project tests header files : ${PROJECT_TEST_HEADERS}")
endif(PROJECT_TEST_HEADERS)

add_library(${PROJECT_NAME} STATIC ${PROJECT_SOURCES} ${PROJECT_HEADERS})
target_link_libraries(${PROJECT_NAME} ${LINKED_LIBRARIES})
target_include_directories(${PROJECT_NAME} PUBLIC ${CMAKE_SOURCE_DIR}/include)
set_property(TARGET ${PROJECT_NAME} PROPERTY C_EXTENSIONS OFF)
set_property(TARGET ${PROJECT_NAME} PROPERTY C_STANDARD 11)
set_property(TARGET ${PROJECT_NAME} PROPERTY CXX_EXTENSIONS OFF)
set_property(TARGET ${PROJECT_NAME} PROPERTY CXX_STANDARD 14)

### WARNING : Only for debugging purpose
## Print All CMake Variables
#get_cmake_property(_variableNames VARIABLES)
#foreach (_variableName ${_variableNames})
# message(STATUS "${_variableName}=${${_variableName}}")
#endforeach()

if(${RUN_TESTS})
    add_definitions(-DTEST_BUILD)
    include(CTest)
    enable_testing()
    find_package(GTest REQUIRED)
    if(NOT ${GTEST_FOUND})
        message(FATAL "Couldn't find GoogleTest")
    endif(NOT ${GTEST_FOUND})
    message(STATUS "Googletest include directory : ${GTEST_INCLUDE_DIRS}")
    message(STATUS "Googletest library : ${GTEST_BOTH_LIBRARIES}")
    list(APPEND LINKED_LIBRARIES GTest::Main GTest::GTest)

    if(${TEST_WITH_BENCHMARK})
        message(STATUS "Compile test build with benchmarks, please note running this build will take long time")
        find_package(benchmark REQUIRED)
        list(APPEND LINKED_LIBRARIES benchmark::benchmark)
        add_definitions(-DTEST_WITH_BENCHMARK)
    else(${TEST_WITH_BENCHMARK})
        message(STATUS "Compile test build without benchmarks, if you want to benchmark please enable it via -DTEST_WITH_BENCHMARK=ON")
    endif(${TEST_WITH_BENCHMARK})

    add_executable("${PROJECT_NAME}_test" ${PROJECT_TEST_SOURCES} ${PROJECT_TEST_HEADERS} ${PROJECT_SOURCES} ${PROJECT_HEADERS})
    message("Linked libraries : ${LINKED_LIBRARIES}")
    target_link_libraries("${PROJECT_NAME}_test" ${LINKED_LIBRARIES})

    target_include_directories("${PROJECT_NAME}_test" PUBLIC ${CMAKE_SOURCE_DIR}/include)
    target_include_directories("${PROJECT_NAME}_test" PUBLIC ${GTEST_INCLUDE_DIRS})
    set_property(TARGET "${PROJECT_NAME}_test" PROPERTY C_EXTENSIONS OFF)
    set_property(TARGET "${PROJECT_NAME}_test" PROPERTY C_STANDARD 11)
    set_property(TARGET "${PROJECT_NAME}_test" PROPERTY CXX_EXTENSIONS OFF)
    set_property(TARGET "${PROJECT_NAME}_test" PROPERTY CXX_STANDARD 14)
    add_test(${PROJECT_NAME} COMMAND "${PROJECT_NAME}_test")

    file(GLOB LIST_CUSTOM_TARGETS src/test_exec/*.cc)
    message("Custom search executables: ${LIST_CUSTOM_TARGETS}")
    foreach(CUSTOM_TARGET ${LIST_CUSTOM_TARGETS})
        get_filename_component(TARGET_NAME ${CUSTOM_TARGET} NAME_WE)
        add_executable(${TARGET_NAME} "${CUSTOM_TARGET}")
        target_include_directories(${TARGET_NAME} PUBLIC ${CMAKE_SOURCE_DIR}/include)
        add_dependencies(${TARGET_NAME} ${PROJECT_NAME})
        target_link_libraries(${TARGET_NAME} PUBLIC ${PROJECT_NAME})
    endforeach(CUSTOM_TARGET ${LIST_CUSTOM_TARGETS})
endif(${RUN_TESTS})
